fRegressCell = fRegress(yfdPar, mfdcell, betacell)
betaestcell  = fRegressCell[[4]]
bfun         = betaestcell[[2]]$fd
errmat     = y - fRegressCell[[5]]
ResY       = errmat
Sigma      = errmat%*%t(errmat)/N  # Originally, there was a 20 here, I assume it is the number of observations N
DfdPar     = fdPar(basis, 0, 1)
y2cMap     = smooth.basis(timevec,m,DfdPar)$y2cMap
stderrCell = fRegress.stderr(fRegressCell, y2cMap, Sigma)
tmp        = stderrCell[[1]]
b_stderr = eval.fd(tfine, tmp[[2]]) # Std Error of b-function
bf = eval.fd(tfine,bfun)            # Evaluate b-function
plot(bf, type="l")
plot(af, type="l")
plot(bf, type="l")
plot(af, type="l")
plot(bf, type="l")
lambda=10;pen=0.1
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
betaestcell  = fRegressCell[[4]]
bfun         = betaestcell[[2]]$fd
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
lambda=1
# Create basis set for beta functions
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
lambda=1e-4
# Create basis set for beta functions
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
betaestcell  = fRegressCell[[4]]
bfun         = betaestcell[[2]]$fd
b_stderr = eval.fd(tfine, tmp[[2]]) # Std Error of b-function
bf = eval.fd(tfine,bfun)            # Evaluate b-function
plot(bf, type="l")
lambda=1e-6
# Create basis set for beta functions
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
betaestcell  = fRegressCell[[4]]
bfun         = betaestcell[[2]]$fd
# Calculate Standard Error
errmat     = y - fRegressCell[[5]]
ResY       = errmat
Sigma      = errmat%*%t(errmat)/N  # Originally, there was a 20 here, I assume it is the number of observations N
DfdPar     = fdPar(basis, 0, 1)
y2cMap     = smooth.basis(timevec,m,DfdPar)$y2cMap
stderrCell = fRegress.stderr(fRegressCell, y2cMap, Sigma)
tmp        = stderrCell[[1]]
b_stderr = eval.fd(tfine, tmp[[2]]) # Std Error of b-function
bf = eval.fd(tfine,bfun)            # Evaluate b-function
plot(bf, type="l")
lambda=1e-8
# Create basis set for beta functions
betacell      = list()
betafd1       = fd(1,conbas)
betacell[[1]] = fdPar(betafd1)
betafdj       = fd(rep(0,nbasis), basis)
betafdPar     = fdPar(betafdj, lambda=lambda)
betacell[[2]] = betafdPar
betacell[[3]] = fdPar(betafd1)
# Solve least-squares equation
fRegressCell = fRegress(yfdPar, mfdcell, betacell)
betaestcell  = fRegressCell[[4]]
bfun         = betaestcell[[2]]$fd
# Calculate Standard Error
errmat     = y - fRegressCell[[5]]
ResY       = errmat
Sigma      = errmat%*%t(errmat)/N  # Originally, there was a 20 here, I assume it is the number of observations N
DfdPar     = fdPar(basis, 0, 1)
y2cMap     = smooth.basis(timevec,m,DfdPar)$y2cMap
stderrCell = fRegress.stderr(fRegressCell, y2cMap, Sigma)
tmp        = stderrCell[[1]]
b_stderr = eval.fd(tfine, tmp[[2]]) # Std Error of b-function
bf = eval.fd(tfine,bfun)            # Evaluate b-function
plot(bf, type="l")
beta
plot(beta)
plot(beta, type="l")
plot(M_obs[1,])
plot(M_obs[1,], type="l")
plot(alpha, type="l")
plot(af, type="l")
plot(alpha, type="l")
plot(af, type="l")
plot(alpha, type="l")
score.sds
plot(delta_1)
plot(delta_1, type="l")
delta_1  <- (Phi_mat[,1:10]%*%d1_vector[1:10])+abs(min((Phi_mat[,1:10]%*%d1_vector[1:10])))
plot(delta_1, type="l")
## 1. Create parameters: covariate and treatment effects
set.seed(4953011+seed_num)
d1_vector <- sapply(score.sds, function(x) rnorm(1,mean=0, sd=x))
l1_vector <- c(rnorm(5,0,l1_wrt_2),rep(0,5))
l2_vector <- c(rnorm(6,0,l2_sd), rep(0,4))
delta_1  <- (Phi_mat[,1:10]%*%d1_vector[1:10])+abs(min((Phi_mat[,1:10]%*%d1_vector[1:10])))
alpha    <- HRF*5
lambda_1 <- Phi_mat[,1:10]%*%l1_vector[1:10]
lambda_2 <- Phi_mat[,1:10]%*%l2_vector[1:10]
plot(delta_1, ylim=range(cbind(delta_1,alpha,lambda_1, lambda_2)) ,type="n")
lines(delta_1, col=qualpalette[1])
lines(alpha, col=qualpalette[2])
lines(lambda_1, col=qualpalette[3])
lines(lambda_2, col=qualpalette[4])
legend("bottomright", expression(delta, alpha, lambda[1],lambda[2]), col=qualpalette[1:4], lty=1, cex=1.5)
## 2. Generate potential mediators
n <- 100
X        <- rnorm(n, 1,1)
Z        <- rbinom(n,1,0.5)
epsilon  <- matrix(rnorm(n*n_timepts,0,sd_epsilon), ncol=n_timepts,nrow=(n))
design_M <- cbind(int=1,Z=Z)
coeff_M  <- cbind(delta_1,alpha)
colnames(coeff_M) <- c("delta_1","alpha")
M        <- t(tcrossprod(coeff_M, design_M))
M_obs    <- M+epsilon
## No confounding scenario:
delta_2  <- 5
gamma    <- 3
beta     <- dnorm(seq(-3.5,6.5,length.out=n_timepts), mean = 0, sd = 0.5)*peak_beta
set.seed(5048191+seed_num)
eta      <- rnorm(n, 0, sd_eta)
design_M_Y <- cbind(int=1,Z=Z,M_obs=M_obs)
coeff_M_Y  <- cbind(delta_2,gamma, t(beta))
Y_obs    <- t(tcrossprod(coeff_M_Y, design_M_Y)) + eta
Y_obs    <- as.numeric(Y_obs)
plot(M_obs[1,], xlim = c(1,ncol(M_obs)), ylim = range(M_obs, na.rm=TRUE), main = "Mediator Functions \n with Errors", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(M_obs[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
lines(beta, col="blue")
hist(Y_obs)
boxplot(Y_obs~Z)
hist(crossprod(t(M_obs),beta))
```
nbasis = 30
norder = 6
out  = fMediation_ML(Z,Y_obs,t(M_obs),nbasis,norder,lambda=1e-8, plot=TRUE)
?fdPar
source('~/GitHub/functional_mediation/fMediation_test.R')
out  = fMediation_ML(Z,Y_obs,t(M_obs),nbasis,norder,lambda=1e-8, plot=TRUE)
plot(alpha, type="l")
plot(beta, type="l")
plot(alpha*beta, type="l")
source('~/GitHub/functional_mediation/fMediation_test.R')
fitS1.fosr2s <- fosr2s(Y = M_obs, design_M, argvals = seq(0, 1, , ncol(M_obs)),
nbasis = 15, norder = 4, basistype = "bspline")
plot.fosr(fitS1.fosr2s)
hat_M_fosr2s <- fitS1.fosr2s$yhat
# plot Observed mediators
plot(M_obs[1,], xlim = c(1,ncol(M_obs)), ylim = range(M_obs, na.rm=TRUE), main = "Mediator Functions \n with Errors", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(M_obs[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
lines(beta, col="blue")
# plot predicted mediators
plot(hat_M_fosr2s[1,], xlim = c(1,ncol(hat_M_fosr2s)), ylim = range(hat_M_fosr2s, na.rm=TRUE), main = "Mediator Functions \n Predicted", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(hat_M_fosr2s[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
lines(beta, col="blue")
# plot true mediators
plot(M[1,], xlim = c(1,ncol(M)), ylim = range(M, na.rm=TRUE), main = "Mediator Functions \n True", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(M[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
lines(beta, col="blue")
# Functional regression using beta as multiple scalar covariates
# Does not work, singular XtX: (fitS2.lm <- lm(Y_obs ~ Z + demean(hat_M_fosr2s)))
# Doing lm with generalized Moore-Penrose Inverse
require(MASS)
require(boot)
lm_MP <- function(data,indices){
Y_obs    <- as.vector(data[indices,"Y_obs"])
design   <- as.matrix(data[indices,-1])
estimate <- ginv(crossprod(design))%*%crossprod(design,Y_obs)
return(estimate)
}
design.fosr2s        <- cbind(int=1,Z=Z,M=demean(hat_M_fosr2s))
fitS2.MP             <- ginv(crossprod(design.fosr2s))%*%crossprod(design.fosr2s,Y_obs)
data2boot            <- data.frame(Y_obs, design.fosr2s)
set.seed(2093402)
fitS2.MP.boot.out    <- boot(data=data2boot, statistic=lm_MP, strata=data2boot$Z,R=5000)
fitS2.MP.boot.CI     <- sapply(1:length(fitS2.MP), function(i) boot.ci(fitS2.MP.boot.out, index=i, conf=0.95, type="perc")$percent[4:5])
# Penalized functional regression
fit.face <- pfr(Y=Y_obs, funcs=demean(hat_M_fosr2s), covariates=cbind(1, Z=Z), kz=15, kb=10,nbasis=10,smooth.option="fpca.face")
fit.sc <- pfr(Y=Y_obs, funcs=demean(hat_M_fosr2s), covariates=cbind(1,Z=Z), kz=15, kb=10,nbasis=10,smooth.option="fpca.sc")
# Plots
matplot(cbind(fitS2.MP,t(fitS2.MP.boot.CI))[-(1:2),], type='l', lty=c(1,2,2), col=c(1,2,2), ylab="BetaHat", ylim=range(c(beta,cbind(fitS2.MP,t(fitS2.MP.boot.CI))[-(1:2),])))
lines(beta, col="blue")
matplot(cbind(fit.face$BetaHat[[1]], fit.face$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta, col="blue")
matplot(cbind(fit.sc$BetaHat[[1]], fit.sc$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta, col="blue")
library(refund)
library(boot)
source('~/GitHub/functional_mediation/fMediation_ML_test.R')
filenames = dir()[grep(".Rdata",dir())]
load(filenames[grep("Simulation1", filenames)])
setwd("~/GitHub/functional_mediation/Simulations/Simulation_SimRevisionR2/gypsie")
filenames = dir()[grep(".Rdata",dir())]
load(filenames[grep("Simulation1", filenames)])
AB = A*B
?matplot
?aes
??aes
?gam
??gam
5/dnorm(0, mean = 0, sd = 0.5)
library(refund)
library(RColorBrewer, warn.conflicts = FALSE)
qualpalette <- brewer.pal(8,"Set2")
library(boot)
source('~/GitHub/functional_mediation/fMediation_ML.R')
short_HRF <- read.table("C:/Users/Yenny/Dropbox/2012 Research/Mediation_Research/Data_experiment/YennyHRF")
HRF <- c(rep(0,5), as.numeric(short_HRF)[2*(1:10)],rep(0,8))
demean <- function(mat) mat - matrix(colMeans(mat), ncol=ncol(mat), nrow=nrow(mat), byrow=TRUE)
CI_95 <- function(mean, sd) mean + qnorm(c(0.025,0.975))*sd
source('C:/Users/Yenny/Dropbox/2012 Research/Mediation_Research/Data_experiment/20130805_simulation_fRPM/20130805_simulation_fRPM_Only_PCs.R')
Phi_mat   <- PCs
n_timepts <- nrow(PCs)
n_bases   <- ncol(PCs)
score.sds   <- round(sqrt(apply(scores, 2, var)),1)
## 0. Create uber parameters:
l2_sd       <- 0      # Size of interaction effect (X*Z on M)
l1_wrt_2    <- 0.6    # Comparison of l1 size with respect l2
seed_num    <- 10
peak_beta   <- 10/dnorm(0, mean = 0, sd = 0.5)  # Take the peak of a normal at z=0, scale to have an effect of 5
sd_epsilon  <- 1
sd_eta      <- 1
## 1. Create parameters: covariate and treatment effects
set.seed(4953011+seed_num)
d1_vector <- sapply(score.sds, function(x) rnorm(1,mean=0, sd=x))
delta_1  <- (Phi_mat[,1:10]%*%d1_vector[1:10])+abs(min((Phi_mat[,1:10]%*%d1_vector[1:10])))
alpha    <- HRF*5
plot(delta_1, ylim=range(cbind(delta_1,alpha)) ,type="n")
lines(delta_1, col=qualpalette[1])
lines(alpha, col=qualpalette[2])
## 2. Generate potential mediators
n <- 100
X        <- rnorm(n, 1,1)
Z        <- rbinom(n,1,0.5)
epsilon  <- matrix(rnorm(n*n_timepts,0,sd_epsilon), ncol=n_timepts,nrow=(n))
design_M <- cbind(int=1,Z=Z)
coeff_M  <- cbind(delta_1,alpha)
colnames(coeff_M) <- c("delta_1","alpha")
M        <- t(tcrossprod(coeff_M, design_M))
M_obs    <- M+epsilon
## No confounding scenario:
delta_2  <- 5
gamma    <- 3
beta     <- dnorm(seq(-3.5,6.5,length.out=n_timepts), mean = 0, sd = 0.5)*peak_beta
set.seed(5048191+seed_num)
eta      <- rnorm(n, 0, sd_eta)
design_M_Y <- cbind(int=1,Z=Z,M_obs=M_obs)
coeff_M_Y  <- cbind(delta_2,gamma, t(beta)*1/(ncol(M_obs)-1))
Y_obs    <- t(tcrossprod(coeff_M_Y, design_M_Y)) + eta
Y_obs    <- as.numeric(Y_obs)
plot(M_obs[1,], xlim = c(1,ncol(M_obs)), ylim = range(M_obs, na.rm=TRUE), main = "Mediator Functions \n with Errors", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(M_obs[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
lines(beta, col="blue")
hist(Y_obs)
boxplot(Y_obs~Z)
hist(crossprod(t(M_obs),beta))
out  = fMediation_ML(Z,Y_obs,t(M_obs),nbasis=30,norder=6,lambda=1e-8, plot=TRUE)
par(mfrow=c(3,1))
plot(out$afunction, type="l")
lines(alpha, col="blue")
plot(out$bfunction, type="l")
lines(beta, col="blue")
plot(out$abfunction, type="l")
lines(alpha*beta, col="blue")
library(fda)
# Mediator prediction.
# Two-step function-on-scalar regression
fitS1.fosr2s <- fosr2s(Y = M_obs, design_M, argvals = seq(0, 1, , ncol(M_obs)),
nbasis = 15, norder = 4, basistype = "bspline")
plot.fosr(fitS1.fosr2s)
hat_M_fosr2s <- fitS1.fosr2s$yhat
# plot Observed mediators
plot(M_obs[1,], xlim = c(1,ncol(M_obs)), ylim = range(M_obs, na.rm=TRUE), main = "Mediator Functions \n with Errors", ylab = "Intensity", col = rgb((200*Z[1]+1),1,1, 30, maxColorValue = 255), type = "l")
for (i in 2:nrow(M)){
lines(M_obs[i,], col=rgb((200*Z[i]+1),1,1, 30, maxColorValue=255))
}
# Plot alpha function
plot(fitS1.fosr2s$est[,2], type="l")
lines(alpha, col="blue")
# Function-on-scalar regression
fitS1.fosr <- fosr(Y = M_obs, X=design_M, argvals = seq(0, 1, , ncol(M_obs)), method = "mix")
plot.fosr(fitS1.fosr)
# Plot alpha function
plot(fitS1.fosr$est[,2], type="l")
lines(alpha, col="blue")
# Functional regression using beta as multiple scalar covariates
require(MASS)
require(boot)
lm_MP <- function(data,indices){
Y_obs    <- as.vector(data[indices,"Y_obs"])
design   <- as.matrix(data[indices,-1])
estimate <- solve(crossprod(design))%*%crossprod(design,Y_obs)
return(estimate)
}
design               <- cbind(int=1,Z=Z,M=demean(M_obs))
fitS2.MP             <- solve(crossprod(design))%*%crossprod(design,Y_obs)
data2boot            <- data.frame(Y_obs, design)
set.seed(2093402)
fitS2.MP.boot.out    <- boot(data=data2boot, statistic=lm_MP, strata=data2boot$Z,R=5000)
fitS2.MP.boot.CI     <- sapply(1:length(fitS2.MP), function(i) boot.ci(fitS2.MP.boot.out, index=i, conf=0.95, type="perc")$percent[4:5])
matplot(cbind(fitS2.MP,t(fitS2.MP.boot.CI))[-(1:2),], type='l', lty=c(1,2,2), col=c(1,2,2), ylab="BetaHat", ylim=range(c(beta,cbind(fitS2.MP,t(fitS2.MP.boot.CI))[-(1:2),])))
lines(beta, col="blue")
# Estimates of the direct effect
cbind(cbind(fitS2.MP,t(fitS2.MP.boot.CI))[1:2,], c(delta_2, gamma))
# Penalized functional regression
fit.face <- pfr(Y=Y_obs, funcs=list(M_obs), covariates=cbind(1, Z=Z),kb=40, nbasis=26, smooth.option="fpca.face", pve=0.99)
matplot(cbind(fit.face$BetaHat[[1]], fit.face$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta, col="blue")
fit.sc <- pfr(Y=Y_obs, funcs=demean(M_obs), covariates=cbind(1,Z=Z),kb=50, nbasis=20,smooth.option="fpca.sc", pve=0.99)
matplot(cbind(fit.sc$BetaHat[[1]], fit.sc$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta, col="blue")
fit <- fgam(Y_obs ~ Z _ lf(M_obs))
fit <- fgam(Y_obs ~ Z + lf(M_obs))
sm <- fit$fgam$smooth[[1]]
names(fit$fgam)
names(fit$fgam$ft)
str(fit$fgam)
meddata <- data.frame(Z = 0, M_obs.tmat = seq(0,1,length=23))
newdata <- data.frame(Z = 0, M_obs.tmat = seq(0,1,length=23))
beta_hat <- predict(fit, newdata)
newdata
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
beta_hat <- predict(fit, newdata)
newdata <- list(Z = 0, M_obs.tmat = seq(0,1,length=23))
beta_hat <- predict(fit, newdata)
??PredictMat
vignette(mgcv)
?mgcv
vignette("mgcv")
sm <- fit$fgam$ft[[1]]
class(sm)
predictMat(sm, newdata)
PredictMat(sm, newdata)
library(mgcv)
PredictMat(sm, newdata)
beta_hat <- predict(fit, newdata)
?predict.fgam
predictions <- predict(fit)
st(predictions)
str(predictions)
hist(predictions)
hist(Y_obs)
mean(Y_obs[Z==1])
mean(Y_obs[Z==0])
mean(predictions[Z==0])
mean(predictions[Z==1])
debug(predict.fgam)
str(fit)
names(fit)
sm <- fit$smooth
PredictMat(sm, newdata)
class(sm)
sm <- fit$smooth[[1]]
class(sm)
PredictMat(sm, newdata)
names(newdata)
newdata <- list(M_obs.tmat = seq(0,1,length=23))
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
newdata <- data.frame(M_obs = seq(0,1,length=23))
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
PredictMat(sm, newdata)
debug(PredictMat)
PredictMat(sm, newdata)
object$by
str(data)
?get.var
newdata <- data.frame(L.M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
undebug(PredictMat)
PredictMat(sm, newdata)
debug(PredictMat)
PredictMat(sm, newdata)
newdata <- data.frame(M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
by <- get.var(object$by, data)
by
str(object)
undebug(PredictMat)
PredictMat(sm, newdata)
str(sm)
PredictMat(sm)
PredictMat(sm, data = newdata)
newdata <- data.frame(M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=100))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
debug(PredictMat)
PredictMat(sm, newdata)
str(by)
str(object$by)
by
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23), L.M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
PredictMat(sm, newdata)
by
undebug(PredictMat)
names(fit)
str(fit$coef)
PredictMat(sm, newdata)%*%fit$coef[-(1:2)]
matplot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
newdata <- data.frame(M_obs.tmat = seq(0,0,length=23), L.M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23), L.M_obs = seq(0,0,length=23))
sm <- fit$smooth[[1]]
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
newdata <- data.frame(M_obs.tmat = seq(0,1,length=23), L.M_obs = seq(0,1,length=23))
sm <- fit$smooth[[1]]
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
?pfr
fit.face <- pfr(Y=Y_obs, funcs=list(M_obs), covariates=cbind(1, Z=Z),kb=40, nbasis=26, smooth.option="fpca.face", pve=0.99, method="GCV")
fit.face <- pfr(Y=Y_obs, funcs=list(M_obs), covariates=cbind(1, Z=Z),kb=40, nbasis=26, smooth.option="fpca.face", pve=0.99, method="gcv")
?gam
fit.face <- pfr(Y=Y_obs, funcs=list(M_obs), covariates=cbind(1, Z=Z),kb=40, nbasis=26, smooth.option="fpca.face", pve=0.99, method="GCV.Cp")
matplot(cbind(fit.face$BetaHat[[1]], fit.face$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta*1/(ncol(M_obs)-1), col="blue")
fit.sc <- pfr(Y=Y_obs, funcs=demean(M_obs), covariates=cbind(1,Z=Z),kb=50, nbasis=20,smooth.option="fpca.sc", pve=0.99, method="GCV.Cp")
par(mfrow=c(1,2))
matplot(cbind(fit.sc$BetaHat[[1]], fit.sc$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
fit.face <- pfr(Y=Y_obs, funcs=list(M_obs), covariates=cbind(1, Z=Z),kb=40, nbasis=26, smooth.option="fpca.face", pve=0.99, method="REML")
matplot(cbind(fit.face$BetaHat[[1]], fit.face$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta*1/(ncol(M_obs)-1), col="blue")
fit.sc <- pfr(Y=Y_obs, funcs=demean(M_obs), covariates=cbind(1,Z=Z),kb=50, nbasis=20,smooth.option="fpca.sc", pve=0.99, method="REML")
matplot(cbind(fit.sc$BetaHat[[1]], fit.sc$Bounds[[1]]),
type = 'l', lty = c(1,2,2), col = c(1,2,2), ylab = "BetaHat")
lines(beta*1/(ncol(M_obs)-1), col="blue")
par(mfrow=c(3,1))
plot(out$afunction, type="l")
lines(alpha, col="blue")
plot(out$bfunction, type="l")
lines(beta, col="blue")
plot(out$abfunction, type="l")
lines(alpha*beta, col="blue")
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)])
plot(PredictMat(sm, newdata)%*%fit$coef[-(1:2)], type="l")
lines(beta, col="blue")
lines(beta*1/(ncol(M_obs)-1), col="blue")
cls()
?clear.screen
??clear.screen
